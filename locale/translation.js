// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('TX');
gettext('TX-regs');
gettext('Serial-TX-sys');
gettext('System serial transmitter. It transmit bit at the system clock rate');
gettext('4-bits Syscounter with reset');
gettext('DFF-rst-x04: Three D flip-flops in paralell with reset');
gettext('DFF-rst-x01: D Flip flop with reset input. When rst=1, the DFF is 0');
gettext('D Flip-flop (verilog implementation)');
gettext('NOT gate (Verilog implementation)');
gettext('Two bits input And gate');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('Inc1-4bit: Increment a 4-bits number by one');
gettext('AdderK-4bit: Adder of 4-bit operand and 4-bit constant');
gettext('Generic: 4-bits generic constant (0-15)');
gettext('Adder-4bits: Adder of two operands of 4 bits');
gettext('Adder-1bit: Adder of two operands of 1 bit');
gettext('AdderC-1bit: Adder of two operands of 1 bit plus the carry in');
gettext('XOR gate: two bits input xor gate');
gettext('OR2: Two bits input OR gate');
gettext('Constant bit 0');
gettext('OR-BUS4: OR gate with 4-bits bus input');
gettext('OR4: Four bits input OR gate');
gettext('Comp1-x04: Comparator of 4-bits operand and parameter');
gettext('Comp2-4bit: Comparator of two 4-bit numbers');
gettext('Comp2-1bit: Comparator of two 1-bit numbers');
gettext('Three bits input And gate');
gettext('Falling-edge detector. It generates a 1-period pulse (tic) when a falling edge is detected on the input');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('Puerta NOT');
gettext('Puerta AND');
gettext('Serializer-tx-register: When txmit=1 the data is captured and sent serially (at the system clock speed)');
gettext('Constant bit 1');
gettext('DFF-chain-load: D Flip-flop with two input sources. When load=1 the paralell data (pd) is loaded. When load=0 the sd is loaded');
gettext('2-to-1 Multplexer (1-bit channels)');
gettext('Byte to transmit');
gettext('Transmit tic');
gettext('Bit counter. It counts the transmited bits  \nInitially rst=1, and the counter is \"frozen\" (0)  \n\n');
gettext('When the counter is != 0 means  \nsomething is being transmited  \n(busy transmitter)');
gettext('9 bits transmited?');
gettext('yes! Reset the  \ncounter');
gettext('When rst=0, it  \nstart couting');
gettext('No external tics allowed  \nwhile the transmitter is  \nalready working...');
gettext('Transmitter state:  \n0: Idle. Ready to transmit  \n1: Busy. Transmitting bits  ');
gettext('The transmitter is done  \nwhen the busy signal is  \ndeactivated');
gettext('Special shift register');
gettext('Reset input: Active high  \nWhen rst = 1, the DFF is reset to 0');
gettext('Data input');
gettext('System clock');
gettext('Parameter: Initial value');
gettext('Input data');
gettext('Output');
gettext('# D Flip-Flop  \n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Input');
gettext('Initial default  \nvalue: 0');
gettext('A');
gettext('B');
gettext('## Falling edge detector\n\nIt generates a 1-period pulse (tic) when a falling edge is detected on the  \ninput signal');
gettext('Input signal');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('If the current signal is 0 and its value in  \nthe previous clock cycle was 1, it means  \nthat a falling edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a falling edge  \nand its detection');
gettext('Initially all the Flip-Flops should be 1  \n(Because the serial idle state is 1)');
gettext('The Start bit is 0');
gettext('Data to transmit');
gettext('Stop Bit');
gettext('When txmit (tic) is 1, the data  \nis loaded into the shift register  \nand sent');
gettext('Serial data');
gettext('Paralell data');
gettext('Data loaded when  \nload = 0');
gettext('Data loaded when  \nload = 1');
gettext('the ini input is output  \nagain for easy connection  \nof more flip-flops');
gettext('Serializer-TX-reg');
gettext('TESTs');
gettext('TX-regs');
gettext('Serializer-TX');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Sync 1-bit input with the system clock domain');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Puerta XOR');
gettext('Remove the rebound on a mechanical switch');
gettext('1bit register (implemented in verilog)');
gettext('Contador módulo M, ascendente, de 16 bits, con reset ');
gettext('Un bit constante a 1');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input');
gettext('Generic: 8-bits generic constant (0-255)');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('Previous input  \nvalue');
gettext('Current input  \nvalue');
gettext('There is a change  \non the input');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Counter');
gettext('Initial value');
gettext('**Parámetro**: Módulo del contador');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('01-manual-testing');
